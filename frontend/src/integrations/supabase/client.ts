// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_PUBLISHABLE_KEY;

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

const hasConfig = Boolean(SUPABASE_URL && SUPABASE_PUBLISHABLE_KEY);

let supabase: ReturnType<typeof createClient<Database>> | any;

if (hasConfig) {
  supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
    auth: {
      storage: localStorage,
      persistSession: true,
      autoRefreshToken: true,
    }
  });
} else {
  // Safe shim so the app doesn't crash if env is missing
  if (typeof console !== 'undefined') {
    console.warn('[Supabase] VITE_SUPABASE_URL and VITE_SUPABASE_PUBLISHABLE_KEY are not set. Auth features are disabled.');
  }
  supabase = {
    auth: {
      async getSession() {
        return { data: { session: null }, error: null } as any;
      },
      onAuthStateChange() {
        return { data: { subscription: { unsubscribe() {} } } } as any;
      },
      async signInWithPassword() {
        return { error: new Error('Supabase is not configured') } as any;
      },
      async signUp() {
        return { error: new Error('Supabase is not configured') } as any;
      },
      async signOut() {
        return { error: null } as any;
      },
    },
  };
}

export { supabase, hasConfig as hasSupabaseConfig };